// <auto-generated />
using System;
using Fyro.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FYRO.Data.SqlServer.Migrations
{
    [DbContext(typeof(FyroDbContext))]
    [Migration("20210207023233_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("DufferEntityEventEntity", b =>
                {
                    b.Property<Guid>("DuffersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EventsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DuffersId", "EventsId");

                    b.HasIndex("EventsId");

                    b.ToTable("DufferEntityEventEntity");
                });

            modelBuilder.Entity("DufferEntityPairingEntity", b =>
                {
                    b.Property<Guid>("DuffersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PairingsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DuffersId", "PairingsId");

                    b.HasIndex("PairingsId");

                    b.ToTable("DufferEntityPairingEntity");
                });

            modelBuilder.Entity("Fyro.Data.Entities.AddressEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("County")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AddressEntity");

                    b.HasDiscriminator<string>("Discriminator").HasValue("AddressEntity");
                });

            modelBuilder.Entity("Fyro.Data.Entities.CompetitionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Scope")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Competitions");
                });

            modelBuilder.Entity("Fyro.Data.Entities.DufferCondoEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CondoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CondoId");

                    b.ToTable("DufferCondos");
                });

            modelBuilder.Entity("Fyro.Data.Entities.DufferEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CondoEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("CondoEntityId");

                    b.ToTable("Duffers");
                });

            modelBuilder.Entity("Fyro.Data.Entities.EventLodgingEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LodgingId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("LodgingId");

                    b.ToTable("EventLodgings");
                });

            modelBuilder.Entity("Fyro.Data.Entities.GolfAwardEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GolfId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PairingAwardId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GolfId");

                    b.HasIndex("PairingAwardId");

                    b.ToTable("GolfAwards");
                });

            modelBuilder.Entity("Fyro.Data.Entities.GolfEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("WinnerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("CourseId");

                    b.HasIndex("EventId");

                    b.HasIndex("WinnerId");

                    b.ToTable("Golfs");
                });

            modelBuilder.Entity("Fyro.Data.Entities.HoleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GolfId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("Par")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GolfId");

                    b.ToTable("Holes");
                });

            modelBuilder.Entity("Fyro.Data.Entities.HoleScore", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PairingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Score")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PairingId");

                    b.ToTable("HoleScores");
                });

            modelBuilder.Entity("Fyro.Data.Entities.IndividualAwardEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CompetitionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DufferId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EventEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GolfAwardEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionId");

                    b.HasIndex("DufferId");

                    b.HasIndex("EventEntityId");

                    b.HasIndex("GolfAwardEntityId");

                    b.ToTable("IndividualAwards");
                });

            modelBuilder.Entity("Fyro.Data.Entities.PairingAwardEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CompetitionEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DufferEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PairingId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionEntityId");

                    b.HasIndex("DufferEntityId");

                    b.HasIndex("PairingId");

                    b.ToTable("PairingAwards");
                });

            modelBuilder.Entity("Fyro.Data.Entities.PairingEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GolfId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GolfId");

                    b.ToTable("Pairings");
                });

            modelBuilder.Entity("Fyro.Data.Entities.CondoEntity", b =>
                {
                    b.HasBaseType("Fyro.Data.Entities.AddressEntity");

                    b.Property<Guid?>("EventLodgingEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Latitude")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("float");

                    b.Property<Guid?>("LodgingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Longitude")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("EventLodgingEntityId");

                    b.HasIndex("LodgingId");

                    b.HasDiscriminator().HasValue("CondoEntity");
                });

            modelBuilder.Entity("Fyro.Data.Entities.CourseEntity", b =>
                {
                    b.HasBaseType("Fyro.Data.Entities.AddressEntity");

                    b.Property<double>("Latitude")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("CourseEntity");
                });

            modelBuilder.Entity("Fyro.Data.Entities.EventEntity", b =>
                {
                    b.HasBaseType("Fyro.Data.Entities.AddressEntity");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<Guid?>("LodgingId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("EventEntity_LodgingId");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasIndex("LodgingId");

                    b.HasDiscriminator().HasValue("EventEntity");
                });

            modelBuilder.Entity("Fyro.Data.Entities.LodgingEntity", b =>
                {
                    b.HasBaseType("Fyro.Data.Entities.AddressEntity");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("LodgingEntity");
                });

            modelBuilder.Entity("DufferEntityEventEntity", b =>
                {
                    b.HasOne("Fyro.Data.Entities.DufferEntity", null)
                        .WithMany()
                        .HasForeignKey("DuffersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fyro.Data.Entities.EventEntity", null)
                        .WithMany()
                        .HasForeignKey("EventsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DufferEntityPairingEntity", b =>
                {
                    b.HasOne("Fyro.Data.Entities.DufferEntity", null)
                        .WithMany()
                        .HasForeignKey("DuffersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fyro.Data.Entities.PairingEntity", null)
                        .WithMany()
                        .HasForeignKey("PairingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Fyro.Data.Entities.DufferCondoEntity", b =>
                {
                    b.HasOne("Fyro.Data.Entities.CondoEntity", "Condo")
                        .WithMany()
                        .HasForeignKey("CondoId");

                    b.Navigation("Condo");
                });

            modelBuilder.Entity("Fyro.Data.Entities.DufferEntity", b =>
                {
                    b.HasOne("Fyro.Data.Entities.AddressEntity", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("Fyro.Data.Entities.CondoEntity", null)
                        .WithMany("Duffers")
                        .HasForeignKey("CondoEntityId");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Fyro.Data.Entities.EventLodgingEntity", b =>
                {
                    b.HasOne("Fyro.Data.Entities.EventEntity", "Event")
                        .WithMany()
                        .HasForeignKey("EventId");

                    b.HasOne("Fyro.Data.Entities.LodgingEntity", "Lodging")
                        .WithMany()
                        .HasForeignKey("LodgingId");

                    b.Navigation("Event");

                    b.Navigation("Lodging");
                });

            modelBuilder.Entity("Fyro.Data.Entities.GolfAwardEntity", b =>
                {
                    b.HasOne("Fyro.Data.Entities.GolfEntity", "Golf")
                        .WithMany()
                        .HasForeignKey("GolfId");

                    b.HasOne("Fyro.Data.Entities.PairingAwardEntity", "PairingAward")
                        .WithMany()
                        .HasForeignKey("PairingAwardId");

                    b.Navigation("Golf");

                    b.Navigation("PairingAward");
                });

            modelBuilder.Entity("Fyro.Data.Entities.GolfEntity", b =>
                {
                    b.HasOne("Fyro.Data.Entities.AddressEntity", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("Fyro.Data.Entities.CourseEntity", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId");

                    b.HasOne("Fyro.Data.Entities.EventEntity", "Event")
                        .WithMany("Golfs")
                        .HasForeignKey("EventId");

                    b.HasOne("Fyro.Data.Entities.PairingEntity", "Winner")
                        .WithMany()
                        .HasForeignKey("WinnerId");

                    b.Navigation("Address");

                    b.Navigation("Course");

                    b.Navigation("Event");

                    b.Navigation("Winner");
                });

            modelBuilder.Entity("Fyro.Data.Entities.HoleEntity", b =>
                {
                    b.HasOne("Fyro.Data.Entities.GolfEntity", "Golf")
                        .WithMany()
                        .HasForeignKey("GolfId");

                    b.Navigation("Golf");
                });

            modelBuilder.Entity("Fyro.Data.Entities.HoleScore", b =>
                {
                    b.HasOne("Fyro.Data.Entities.PairingEntity", "Pairing")
                        .WithMany("Scores")
                        .HasForeignKey("PairingId");

                    b.Navigation("Pairing");
                });

            modelBuilder.Entity("Fyro.Data.Entities.IndividualAwardEntity", b =>
                {
                    b.HasOne("Fyro.Data.Entities.CompetitionEntity", "Competition")
                        .WithMany()
                        .HasForeignKey("CompetitionId");

                    b.HasOne("Fyro.Data.Entities.DufferEntity", "Duffer")
                        .WithMany("IndividualAwards")
                        .HasForeignKey("DufferId");

                    b.HasOne("Fyro.Data.Entities.EventEntity", null)
                        .WithMany("IndividualAwards")
                        .HasForeignKey("EventEntityId");

                    b.HasOne("Fyro.Data.Entities.GolfAwardEntity", null)
                        .WithMany("IndividualAwards")
                        .HasForeignKey("GolfAwardEntityId");

                    b.Navigation("Competition");

                    b.Navigation("Duffer");
                });

            modelBuilder.Entity("Fyro.Data.Entities.PairingAwardEntity", b =>
                {
                    b.HasOne("Fyro.Data.Entities.CompetitionEntity", "CompetitionEntity")
                        .WithMany()
                        .HasForeignKey("CompetitionEntityId");

                    b.HasOne("Fyro.Data.Entities.DufferEntity", null)
                        .WithMany("PairingAwards")
                        .HasForeignKey("DufferEntityId");

                    b.HasOne("Fyro.Data.Entities.PairingEntity", "Pairing")
                        .WithMany()
                        .HasForeignKey("PairingId");

                    b.Navigation("CompetitionEntity");

                    b.Navigation("Pairing");
                });

            modelBuilder.Entity("Fyro.Data.Entities.PairingEntity", b =>
                {
                    b.HasOne("Fyro.Data.Entities.GolfEntity", "Golf")
                        .WithMany("Pairings")
                        .HasForeignKey("GolfId");

                    b.Navigation("Golf");
                });

            modelBuilder.Entity("Fyro.Data.Entities.CondoEntity", b =>
                {
                    b.HasOne("Fyro.Data.Entities.EventLodgingEntity", null)
                        .WithMany("Condos")
                        .HasForeignKey("EventLodgingEntityId");

                    b.HasOne("Fyro.Data.Entities.LodgingEntity", "Lodging")
                        .WithMany()
                        .HasForeignKey("LodgingId");

                    b.Navigation("Lodging");
                });

            modelBuilder.Entity("Fyro.Data.Entities.EventEntity", b =>
                {
                    b.HasOne("Fyro.Data.Entities.LodgingEntity", "Lodging")
                        .WithMany()
                        .HasForeignKey("LodgingId");

                    b.Navigation("Lodging");
                });

            modelBuilder.Entity("Fyro.Data.Entities.DufferEntity", b =>
                {
                    b.Navigation("IndividualAwards");

                    b.Navigation("PairingAwards");
                });

            modelBuilder.Entity("Fyro.Data.Entities.EventLodgingEntity", b =>
                {
                    b.Navigation("Condos");
                });

            modelBuilder.Entity("Fyro.Data.Entities.GolfAwardEntity", b =>
                {
                    b.Navigation("IndividualAwards");
                });

            modelBuilder.Entity("Fyro.Data.Entities.GolfEntity", b =>
                {
                    b.Navigation("Pairings");
                });

            modelBuilder.Entity("Fyro.Data.Entities.PairingEntity", b =>
                {
                    b.Navigation("Scores");
                });

            modelBuilder.Entity("Fyro.Data.Entities.CondoEntity", b =>
                {
                    b.Navigation("Duffers");
                });

            modelBuilder.Entity("Fyro.Data.Entities.EventEntity", b =>
                {
                    b.Navigation("Golfs");

                    b.Navigation("IndividualAwards");
                });
#pragma warning restore 612, 618
        }
    }
}
